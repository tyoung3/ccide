
/*  	
	tryit.cpp.d 
	Copyright (C) 2012;  David Topham.  Used by permission.

    	This file is part of ccide, the C Language Decision Table Code Generator.

   	Ccide is free software: you can redistribute it and/or modify
   	it under the terms of the GNU General Public License as published by
    	the Free Software Foundation, either version 3 of the License, or
   	(at your option) any later version.

    	Ccide is distributed in the hope that it will be useful,
    	but WITHOUT ANY WARRANTY; without even the implied warranty of
    	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    	GNU General Public License for more details.

    	You should have received a copy of the GNU General Public License
    	along with Ccide.  If not, see <http://www.gnu.org/licenses/> or
    	write to the Free Software Foundation, Inc., 51 Franklin St, 
    	Fifth Floor, Boston, MA 02110-1301 USA.
*/
//CCIDE_INLINE_CODE:
//GENERATED_CODE:
#ifndef __CCIDE_INLINE_C
#define __CCIDE_INLINE_C
//
//	ccide-C++.m4  Copyright (C) 2002-2004,2010,2012; Thomas W. Young, e-mail:  ccide@twyoung.com
// The code generated by ccide is covered by the same license as the source  
// code(decision table) from which it is derived. If you created the source,  
// you are free to do anything you like with the generated code, 
// including incorporating it into or linking it with proprietary software.  
//
typedef unsigned int CCIDE_BIT;
static int ccide_group=1;

#ifndef UINT_MAX
#include "limits.h"
#endif

static int CcideFindRule(               // Return rule number 
	int nbrrules,  CCIDE_BIT ccide_table, CCIDE_BIT yes[], CCIDE_BIT no[])
{
        int r=0;
        CCIDE_BIT nstate;

        nstate = UINT_MAX ^ ccide_table;

        while (
		( (yes[r] & nstate) || (no[r]  & ccide_table) )
		 && ( ++r < nbrrules )
	) {};

        return r;
}

static int CcideFindRuleYes(             // Return rule number 
	int nbrrules, CCIDE_BIT ccide_table, CCIDE_BIT yes[])
{
        int r=0;
        CCIDE_BIT nstate;

        nstate = UINT_MAX ^ ccide_table;
        while ( (yes[r] & nstate) && ( ++r < nbrrules ) ) {};
        return r;
}
#endif // End ifndef  __CCIDE_INLINE_C  
//END_GENERATED_CODE:
//GENERATED_CODE: 
// Substitution strings are: $$ and $@
//END_GENERATED_CODE: 
#include <iostream>
using namespace std;
int main ()
{
  double number;
  cout<<"Enter a number ";
  cin>>number;
  string sign;

/*  manually coded version
if( number > 0) sign = "positive";
else if (number<0) sign = "negative";
else sign = "zero";
*/

//DECISION_TABLE:
//  Y - - |number > 0
//  - Y - |number < 0
//  - - Y |number == 0
//______________________
//  X - - |sign = "positive";
//  - X - |sign = "negative";  
//  - - X |sign = "zero";	
//END_TABLE:
//GENERATED_CODE: FOR TABLE_1.	3 Rules, 3 conditions, and 3 actions.
 {	CCIDE_BIT CCIDE_table1_yes[3]={4UL, 2UL, 1UL};


	switch(CcideFindRuleYes(3,(number > 0)
		| (number < 0)<<1
		| (number == 0)<<2
		  ,CCIDE_table1_yes)) {
	CCIDE_1_0: case 0:	//	Rule 3
	    sign = "zero";
	    break;
	CCIDE_1_1: case 1:	//	Rule 2
	    sign = "negative";
	    break;
	CCIDE_1_2: case 2:	//	Rule 1
	    sign = "positive";
	    break;
	} } // End Switch
//END_GENERATED_CODE: FOR TABLE_1, by $CCIDE_VERSION  

  cout<<number<< " is "<<sign<<endl;
  return 0;
}
