/*  IF2RPNQ.C    
*/

#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include "if2rpn.h"

#define SET(X) return (X);
#define SETN(Y) number=(Y); SET(NUMBER); 
#define SETT(X,Y) token=(Y); SET(X); 
#define NTOK 100    // High guess
 
/***********************GLOBAL VARIABLES******************/
TOKEN_TYPE stack[SSIZE+1];
int SP=0,number;		/* Stack Pointer */
TOKEN_TYPE token;

/***********************LOCAL VARIABLES******************/
static int instate=1; 
static int p[NTOK]={0,1};          /* Precedence table */

/***********************LOCAL FUNCTIONS*******************/

//CCIDE_INLINE_CODE:
/*GENERATED_CODE: */
#ifndef __CCIDE_INLINE_C
#define __CCIDE_INLINE_C

/*ccide-$CCIDE_VERSION
ccide is Copyright (C) 2002-2004,2010,2012;  Thomas W. Young, e-mail:  ccide@twyoung.com 
The code generated by ccide is covered by the same license as the source  
code(decision table) from which it is derived. If you created the source,  
you are free to do anything you like with the generated code, 
including incorporating it into or linking it with proprietary software.  
*/ 
static int ccide_group=1; 
#ifndef UINT_MAX 
#include "limits.h" 
#endif  
 
		/* Return rule number */ 
static int CCIDEFindRule(
	int nbrrules,  unsigned long ccide_table, unsigned long yes[], unsigned long no[]){ 
        int r=0; 
        unsigned long nstate; 
 
        nstate = UINT_MAX ^ ccide_table; 
 
        while ( 
		( (yes[r] & nstate) || (no[r]  & ccide_table) ) 
		 && ( ++r < nbrrules )  
	) {}; 
 
        return r; 
} 
 
static int CCIDEFindRuleYes(             /* Return rule number */
	int nbrrules, unsigned long ccide_table, unsigned long yes[]) 
{ 
        int r=0; 
        unsigned long nstate;
 
        nstate = UINT_MAX ^ ccide_table; 
        while ( (yes[r] & nstate) && ( ++r < nbrrules ) ) {}; 
        return r; 
} 
#endif /* End ifndef  __CCIDE_INLINE_C  */
/*END_GENERATED_CODE: */
static int Prec(TOKEN_TYPE a, TOKEN_TYPE b) {
	
}

/***********************GLOBAL FUNCTIONS******************/
STATE GetPrecedence() {
	return Prec(token,TOS);
}

STATE GetToken(){
	//DECISION_TABLE:
	//   1  2  3  4  5  6  7  8  9 10 11 |instate==$$
	// _____________________________________
	//   2  3  4  5  6  7  8  9 10 11 12 |instate=$$;
	//   -  X  -  -  -  -  -  -  -  -  - |SETT(OPERATOR,PLUS);
	//   X  -  -  -  -  -  -  -  -  -  - |SETN(3);	
	//   -  -  X  -  -  -  -  -  -  -  - |SETN(5);
	//   -  -  -  X  -  -  -  -  -  -  - |SETT(OPERATOR,EQUAL);
	//   -  -  -  -  X  -  -  -  -  -  - |SET(EMPTY);
	//END_TABLE:
	//GENERATED_CODE: FOR TABLE_1.	11 Rules, 11 conditions, and 16 actions.
	 { CCIDE_TABLE_1: switch(instate) {	
		case 5:		//  Rule  5  
		    instate=6;
		    SET(EMPTY);
		    break;
		case 4:		//  Rule  4  
		    instate=5;
		    SETT(OPERATOR,EQUAL);
		    break;
		case 3:		//  Rule  3  
		    instate=4;
		    SETN(5);
		    break;
		case 1:		//  Rule  1  
		    instate=2;
		    SETN(3);
		    break;
		case 2:		//  Rule  2  
		    instate=3;
		    SETT(OPERATOR,PLUS);
		    break;
		case 11:		//  Rule 11  
		    instate=12;
		    break;
		case 10:		//  Rule 10  
		    instate=11;
		    break;
		case 9:		//  Rule  9  
		    instate=10;
		    break;
		case 8:		//  Rule  8  
		    instate=9;
		    break;
		case 7:		//  Rule  7  
		    instate=8;
		    break;
		case 6:		//  Rule  6  
		    instate=7;
		    break;
	 }
	}
	//END_GENERATED_CODE: FOR TABLE_1, by ccide-$CCIDE_VERSION Mon Jul 16 12:10:33 2012 
}

void PushToken() {

	//DECISION_TABLE:
	//   N  - |SP<SSIZE
	//________________________
	//   X  - |fprintf(stderr,"Stack space exceeded\n");
	//   X  - |exit(2);
	//   -  X |SP++;
	//   -  X |TOS=token; 
	//END_TABLE:
	//GENERATED_CODE: FOR TABLE_2.	2 Rules, 1 conditions, and 4 actions.
	 {	unsigned long CCIDE_table2_yes[2]={   0UL,   0UL};
		unsigned long CCIDE_table2_no[2]= {   1UL,   0UL};


		switch(CCIDEFindRule(2,
			  (SP<SSIZE)
			  ,CCIDE_table2_yes, CCIDE_table2_no)) {
		case  1:	//	Rule  2 
		    SP++;
		    TOS=token;
		    break;
		case  0:	//	Rule  1 
		    fprintf(stderr,"Stack space exceeded\n");
		    exit(2);
		    break;
		} // End Switch
	}
	//END_GENERATED_CODE: FOR TABLE_2, by ccide-$CCIDE_VERSION Mon Jul 16 12:10:33 2012 
	
}

void OutputNumber() {

	//DECISION_TABLE:
	//   Y |1
	//________________________
	//   X |printf("%i ", number);
	//END_TABLE:
	//GENERATED_CODE: FOR TABLE_3.	1 Rules, 1 conditions, and 1 actions.
	if( (1) )  {
	   {printf("%i ", number);}
	}
	//END_GENERATED_CODE: FOR TABLE_3, by ccide-$CCIDE_VERSION Mon Jul 16 12:10:33 2012 
	
}

void OutputToken(){  
	
	//DECISION_TABLE:
	//   Y |1
	//________________________
	//   X |printf("%s ",token);
	//END_TABLE:
	//GENERATED_CODE: FOR TABLE_4.	1 Rules, 1 conditions, and 1 actions.
	if( (1) )  {
	   {printf("%s ",token);}
	}
	//END_GENERATED_CODE: FOR TABLE_4, by ccide-$CCIDE_VERSION Mon Jul 16 12:10:33 2012 
}

void Pop(){ 
	
	//DECISION_TABLE:
	//   Y  - |SP<1
	//________________________
	//   X  - |fprintf(stderr,"");
	//   X  - |exit(1);
	//   -  X |SP--;
	//END_TABLE:
	//GENERATED_CODE: FOR TABLE_5.	2 Rules, 1 conditions, and 3 actions.
	 {	unsigned long CCIDE_table5_yes[2]={   1UL,   0UL};


		switch(CCIDEFindRuleYes(2,
			  (SP<1)
			  ,CCIDE_table5_yes)) {
		case  1:	//	Rule  2 
		    SP--;
		    break;
		case  0:	//	Rule  1 
		    fprintf(stderr,"");
		    exit(1);
		    break;
		} // End Switch
	}
	//END_GENERATED_CODE: FOR TABLE_5, by ccide-$CCIDE_VERSION Mon Jul 16 12:10:33 2012 
}

char *ttable[]={"-","n","f","|","[","]","o","=","+","*","/"}; 
void PopToQueue() {
	
	printf("%s ",ttable[TOS]);
	Pop();
}


/* End of IF2RNQ.C */
