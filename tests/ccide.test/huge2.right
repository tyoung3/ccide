/*  	ccide - C Language Decision Table Code Generator 
	Copyright (C) 2002-2004,2010,2012;  Thomas W. Young, e-mail:  ccide@twyoung.com

    	This file is part of ccide, the C Language Decision Table Code Generator.

   	Ccide is free software: you can redistribute it and/or modify
   	it under the terms of the GNU General Public License as published by
    	the Free Software Foundation, either version 3 of the License, or
   	(at your option) any later version.

    	Ccide is distributed in the hope that it will be useful,
    	but WITHOUT ANY WARRANTY; without even the implied warranty of
    	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    	GNU General Public License for more details.

    	You should have received a copy of the GNU General Public License
    	along with Ccide.  If not, see <http://www.gnu.org/licenses/> or
    	write to the Free Software Foundation, Inc., 51 Franklin St, 
    	Fifth Floor, Boston, MA 02110-1301 USA.
*/
/* huge2  */

A1() {}
A2() {}
An() {}
//CCIDE_INLINE_CODE:
/*GENERATED_CODE: */
#ifndef __CCIDE_INLINE_C
#define __CCIDE_INLINE_C

/*ccide-0.5.0-8
ccide is Copyright (C) 2002-2004,2010,2012;  Thomas W. Young, e-mail:  ccide@twyoung.com 
The code generated by ccide is covered by the same license as the source  
code(decision table) from which it is derived. If you created the source,  
you are free to do anything you like with the generated code, 
including incorporating it into or linking it with proprietary software.  
*/ 
static int ccide_group=1; 
#ifndef UINT_MAX 
#include "limits.h" 
#endif  
 
		/* Return rule number */ 
static int CCIDEFindRule(
	int nbrrules,  unsigned long ccide_table, unsigned long yes[], unsigned long no[]){ 
        int r=0; 
        unsigned long nstate; 
 
        nstate = UINT_MAX ^ ccide_table; 
 
        while ( 
		( (yes[r] & nstate) || (no[r]  & ccide_table) ) 
		 && ( ++r < nbrrules )  
	) {}; 
 
        return r; 
} 
 
static int CCIDEFindRuleYes(             /* Return rule number */
	int nbrrules, unsigned long ccide_table, unsigned long yes[]) 
{ 
        int r=0; 
        unsigned long nstate;
 
        nstate = UINT_MAX ^ ccide_table; 
        while ( (yes[r] & nstate) && ( ++r < nbrrules ) ) {}; 
        return r; 
} 
#endif /* End ifndef  __CCIDE_INLINE_C  */
/*END_GENERATED_CODE: */
main() {
	int Q1,Q2,Q3,Q4,Q5,Q6;
// . . . . 5 . . . .10 . . . .15 . . . .20 . . . .25 . . . .30 . .            (Rule Number)  (15 & 16 overlap?)
//DECISION_TABLE:
//    Y   N   Y   N   Y   N   Y   N   Y   N   Y   N   Y   N   Y   -   Y   N   Y   N   Y   N   Y   N   Y   N   Y   N   Y   N   Y   N |Q1
//    N   N   N   N   N   N   N   N   N   N   N   N   N   N   N   -   N   N   N   N   N   N   N   N   N   N   N   N   N   N   N   N |Q2
//    Y   Y   Y   Y   Y   Y   Y   Y   Y   Y   Y   Y   Y   Y   Y   -   N   N   N   N   N   N   N   N   N   N   N   N   N   N   N   N |Q3
//    Y   Y   N   N   Y   Y   N   N   Y   Y   N   N   Y   Y   N   -   Y   Y   N   N   Y   Y   N   N   Y   Y   N   N   Y   Y   N   N |Q4
//    Y   Y   Y   Y   N   N   N   N   Y   Y   Y   Y   N   N   N   -   Y   Y   Y   Y   N   N   N   N   Y   Y   Y   Y   N   N   N   N |Q5
//    Y   Y   Y   Y   Y   Y   Y   Y   N   N   N   N   N   N   N   -   Y   Y   Y   Y   Y   Y   Y   Y   N   N   N   N   N   N   N   N |Q6
//-----------------
//    X   -   X   -   X   X   -   X   -   X   X   -   X   -   X   X   -   X   -   X   X   -   X   -   X   X   -   X   -   X   X   - |A2();
//    X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   - |A1();
//    X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X   X |An();
//END_TABLE:
//ERROR: Rules 15 and  16 overlap.
 
//GENERATED_CODE: FOR TABLE_1.	32 Rules, 6 conditions, and 3 actions.
 {	unsigned long CCIDE_table1_yes[32]={  61UL,  60UL,  57UL,  56UL,  53UL,  52UL,  49UL,  48UL,  45UL,  44UL,  41UL,  40UL,  37UL,  36UL,  33UL,  32UL,  29UL,  28UL,  25UL,  24UL,  21UL,  20UL,  17UL,  16UL,  13UL,  12UL,   9UL,   8UL,   5UL,   1UL,   0UL,   0UL};
	unsigned long CCIDE_table1_no[32]= {   2UL,   3UL,   6UL,   7UL,  10UL,  11UL,  14UL,  15UL,  18UL,  19UL,  22UL,  23UL,  26UL,  27UL,  30UL,  31UL,  34UL,  35UL,  38UL,  39UL,  42UL,  43UL,  46UL,  47UL,  50UL,  51UL,  54UL,  55UL,  58UL,  62UL,  63UL,   0UL};


	switch(CCIDEFindRule(32,
		  (Q1)
		| (Q2)<<1
		| (Q3)<<2
		| (Q4)<<3
		| (Q5)<<4
		| (Q6)<<5
		  ,CCIDE_table1_yes, CCIDE_table1_no)) {
	case 0:	//	Rule 1 
	case 4:	//	Rule 3 
	case 8:	//	Rule 5 
	case 9:	//	Rule 6 
	case 13:	//	Rule 8 
	case 17:	//	Rule 10 
	case 20:	//	Rule 11 
	case 24:	//	Rule 13 
	case 28:	//	Rule 15 
	case 31:	//	Rule 16 
	    A2();
	case 1:	//	Rule 2 
	case 5:	//	Rule 4 
	case 12:	//	Rule 7 
	case 16:	//	Rule 9 
	case 21:	//	Rule 12 
	case 25:	//	Rule 14 
	    A1();
	    goto CCIDE_case1_30;
	case 3:	//	Rule 18 
	case 7:	//	Rule 20 
	case 10:	//	Rule 21 
	case 14:	//	Rule 23 
	case 18:	//	Rule 25 
	case 19:	//	Rule 26 
	case 23:	//	Rule 28 
	case 27:	//	Rule 30 
	case 29:	//	Rule 31 
	    A2();
	case 2:	//	Rule 17 
	case 6:	//	Rule 19 
	case 11:	//	Rule 22 
	case 15:	//	Rule 24 
	case 22:	//	Rule 27 
	case 26:	//	Rule 29 
	CCIDE_case1_30: case 30:	//	Rule 32 
	    An();
	    break;
	} // End Switch
}
//END_GENERATED_CODE: FOR TABLE_1, by ccide-0.5.0-8  

	return 0;
}
