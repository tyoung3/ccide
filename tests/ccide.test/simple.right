/*CCIDE_INLINE_CODE:*/
/*GENERATED_CODE: */
#ifndef __CCIDE_INLINE_C
#define __CCIDE_INLINE_C

/*ccide-0.5.0-2
Copyright (C) 2002-2010 Thomas W. Young, e-mail:  ccide@twyoung.com 
This code (generated by ccide) is licensed under the GNU Library 
General Public License  
As such, it may be freely used, even link-editted with proprietary code 
*/ 
static int ccide_group=1; 
#ifndef UINT_MAX 
#include "limits.h" 
#endif  
 
		/* Return rule number */ 
static int CCIDEFindRule(
	int nbrrules,  unsigned long ccide_table, unsigned long yes[], unsigned long no[]){ 
        int r=0; 
        unsigned long nstate; 
 
        nstate = UINT_MAX ^ ccide_table; 
 
        while ( 
		( (yes[r] & nstate) || (no[r]  & ccide_table) ) 
		 && ( ++r < nbrrules )  
	) {}; 
 
        return r; 
} 
 
static int CCIDEFindRuleYes(             /* Return rule number */
	int nbrrules, unsigned long ccide_table, unsigned long yes[]) 
{ 
        int r=0; 
        unsigned long nstate;
 
        nstate = UINT_MAX ^ ccide_table; 
        while ( (yes[r] & nstate) && ( ++r < nbrrules ) ) {}; 
        return r; 
} 
#endif /* End ifndef  __CCIDE_INLINE_C  */
/*END_GENERATED_CODE: */
int a1() {}
int a2() {}
int a3() {}
main() {
	int c2=2,c3=2,c4;
	int swvar[3][3]={{2,3,4},{3,4,2},{4,3,0}};


		/* N.B.: abort() is never executed.*/
	/*DECISION_TABLE:				*/
	/*  2 3 4 | swvar[c2][c3] == $$			*/
	/*  - - - | abort()				*/
        /*  _____ | _______             		*/
	/*  - - - | abort()				*/
	/*  - - X | a1();				*/
	/*  1 2 3 | printf("Rule: %i\n", $$ );		*/
	/*  - X X | a2();				*/
	/*  X X - |NEWGROUP		*/
        /*END_TABLE:					*/
	/*GENERATED_CODE: FOR TABLE_1.	3 Rules, 3 conditions, and 7 actions.*/
	 {	unsigned long CCIDE_table1_yes[3]={   4UL,   2UL,   1UL};
		ccide_group=1;

	CCIDE_TABLE_1:
		switch(CCIDEFindRuleYes(3,
			  (swvar[c2][c3] == 2)
			| (swvar[c2][c3] == 3)<<1
			| (swvar[c2][c3] == 4)<<2
			  ,CCIDE_table1_yes)) {
		case 1:	/*	Rule 2 */
		    printf("Rule: %i\n", 2 );
		    a2();
		    goto CCIDE_TABLE_1;
		case 2:	/*	Rule 1 */
		    printf("Rule: %i\n", 1 );
		    goto CCIDE_TABLE_1;
		case 0:	/*	Rule 3 */
		    a1();
		    printf("Rule: %i\n", 3 );
		    a2();
		    break;
		} /* End Switch*/
	}
	/*END_GENERATED_CODE: FOR TABLE_1, by ccide-0.5.0-2  */

	//DECISION_TABLE:
	//  Y N Y |c4
	//  - N Y |c2
	//  N Y - |c3
	//---|--
	//  - - X |a3();
	//  X - X |a1();
	//  X X - |a2();
	//END_TABLE:
	//GENERATED_CODE: FOR TABLE_2.	3 Rules, 3 conditions, and 3 actions.
	 {	unsigned long CCIDE_table2_yes[3]={   4UL,   3UL,   1UL};
		unsigned long CCIDE_table2_no[3]= {   3UL,   0UL,   4UL};


		switch(CCIDEFindRule(3,
			  (c4)
			| (c2)<<1
			| (c3)<<2
			  ,CCIDE_table2_yes, CCIDE_table2_no)) {
		case 2:	//	Rule 1 
		    a1();
		case 0:	//	Rule 2 
		    a2();
		    break;
		case 1:	//	Rule 3 
		    a3();
		    a1();
		    break;
		} // End Switch
	}
	//END_GENERATED_CODE: FOR TABLE_2, by ccide-0.5.0-2  



	return 0;
}
