/* ccidetime */

#include <stdlib.h>

unsigned long count=0;
unsigned long max=1000;

//CCIDE_INLINE_CODE:
/*GENERATED_CODE: */
#ifndef __CCIDE_INLINE_C
#define __CCIDE_INLINE_C

/*ccide-0.5.0-1
Copyright (C) 2002-2010 Thomas W. Young, e-mail:  ccide@twyoung.com 
This code (generated by ccide) is licensed under the GNU Library 
General Public License  
As such, it may be freely used, even link-editted with proprietary code 
*/ 
static int ccide_group=1; 
#ifndef UINT_MAX 
#include "limits.h" 
#endif  
 
		/* Return rule number */ 
static int CCIDEFindRule(
	int nbrrules,  unsigned long ccide_table, unsigned long yes[], unsigned long no[]){ 
        int r=0; 
        unsigned long nstate; 
 
        nstate = UINT_MAX ^ ccide_table; 
 
        while ( 
		( (yes[r] & nstate) || (no[r]  & ccide_table) ) 
		 && ( ++r < nbrrules )  
	) {}; 
 
        return r; 
} 
 
static int CCIDEFindRuleYes(             /* Return rule number */
	int nbrrules, unsigned long ccide_table, unsigned long yes[]) 
{ 
        int r=0; 
        unsigned long nstate;
 
        nstate = UINT_MAX ^ ccide_table; 
        while ( (yes[r] & nstate) && ( ++r < nbrrules ) ) {}; 
        return r; 
} 
#endif /* End ifndef  __CCIDE_INLINE_C  */
/*END_GENERATED_CODE: */

int main(int argc, char **argv) {

	if( argc>1 ) max = atol(argv[1]);

//DECISION_TABLE:
//  N - | count>max
//-----------------
//  X - | count++;
//  1 - |NEWGROUP		
//END_TABLE:
//GENERATED_CODE: FOR TABLE_1.	2 Rules, 1 conditions, and 3 actions.
 {	unsigned long CCIDE_table1_yes[2]={   0UL,   0UL};
	unsigned long CCIDE_table1_no[2]= {   1UL,   0UL};
	ccide_group=1;

CCIDE_TABLE_1:
	switch(CCIDEFindRule(2,
		  (count>max)
		  ,CCIDE_table1_yes, CCIDE_table1_no)) {
	case 0:	//	Rule 1 
	    count++;
	    ccide_group = 1;
	    goto CCIDE_TABLE_1;
	case 1:	//	Rule 2 
	    break;
	} // End Switch
}
//END_GENERATED_CODE: FOR TABLE_1, by ccide-0.5.0-1  

	return 0;
}

#if 0
[tyoung3@baja ccide]$ time ./ccidetime 10000000

real    0m2.932s
user    0m1.420s
sys     0m0.020s

[tyoung3@baja ccide]$ ric
"main"
"add_f"
"Starting yyparse"
10000000/2.932

3410641

#endif 
