/*  bin2dec: 

**  Test ccide

**  Usage: bin2dec BIN

 
 Use binary number "bbbbb"  to set conditions. 
 Use decision table to decode and print decimal number. 
 verify w/dec2bin function.

**
**  Copyright (c) 2004, Thomas W. Young, The CCIDE Project.
**  47 Mitchell Street
**  Stamford, CT 06902
**  All rights reserved.
**
**       ccide@twyoung.com
*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>

#define LCL static void
#define BUFSIZE 4096
#define NBIT 2

//CCIDE_INLINE_CODE:
/*GENERATED_CODE: */
#ifndef __CCIDE_INLINE_C
#define __CCIDE_INLINE_C

/*ccide-0.5.0-2
Copyright (C) 2002-2010 Thomas W. Young, e-mail:  ccide@twyoung.com 
This code (generated by ccide) is licensed under the GNU Library 
General Public License  
As such, it may be freely used, even link-editted with proprietary code 
*/ 
static int ccide_group=1; 
#ifndef UINT_MAX 
#include "limits.h" 
#endif  
 
		/* Return rule number */ 
static int CCIDEFindRule(
	int nbrrules,  unsigned long ccide_table, unsigned long yes[], unsigned long no[]){ 
        int r=0; 
        unsigned long nstate; 
 
        nstate = UINT_MAX ^ ccide_table; 
 
        while ( 
		( (yes[r] & nstate) || (no[r]  & ccide_table) ) 
		 && ( ++r < nbrrules )  
	) {}; 
 
        return r; 
} 
 
static int CCIDEFindRuleYes(             /* Return rule number */
	int nbrrules, unsigned long ccide_table, unsigned long yes[]) 
{ 
        int r=0; 
        unsigned long nstate;
 
        nstate = UINT_MAX ^ ccide_table; 
        while ( (yes[r] & nstate) && ( ++r < nbrrules ) ) {}; 
        return r; 
} 
#endif /* End ifndef  __CCIDE_INLINE_C  */
/*END_GENERATED_CODE: */

#define MAXBINC 32

int main(int argc, char **argv) {
	char *binc;
	long dec;

	if( argc>1 ) {
		binc = argv[1]; 
	} else {
		binc = "10101";
//		fprintf(stderr,"Usage: bin2dec BINARY_NUMBER");
//		exit(1);
	}
	dec = 0;
//DECISION_TABLE:
//  Y - Y - Y - Y - Y - Y - Y - Y - Y - Y - Y - Y - Y - Y - Y - Y | binc[0] == '1'
//  Y Y - - Y Y - - Y Y - - Y Y - - Y Y - - Y Y - - Y Y - - Y Y - | binc[1] == '1'
//  Y Y Y Y - - - - Y Y Y Y - - - - Y Y Y Y - - - - Y Y Y Y - - - | binc[2] == '1'
//  Y Y Y Y Y Y Y Y - - - - - - - - Y Y Y Y Y Y Y Y - - - - - - - | binc[3] == '1'
//  Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y - - - - - - - - - - - - - - - | binc[4] == '1'
// _____________________________________________________________  | ______________
//  X - X - X - X - X - X - X - X - X - X - X - X - X - X - X - X | dec += 16;
//  X X - - X X - - X X - - X X - - X X - - X X - - X X - - X X - | dec += 8;
//  X X X X - - - - X X X X - - - - X X X X - - - - X X X X - - - | dec += 4;
//  X X X X X X X X - - - - - - - - X X X X X X X X - - - - - - - | dec += 2; 
//  X X X X X X X X X X X X X X X X - - - - - - - - - - - - - - - | dec += 1; 

//END_TABLE:
//GENERATED_CODE: FOR TABLE_1.	31 Rules, 5 conditions, and 5 actions.
 {	unsigned long CCIDE_table1_yes[31]={  31UL,  30UL,  29UL,  28UL,  27UL,  26UL,  25UL,  24UL,  23UL,  22UL,  21UL,  20UL,  19UL,  18UL,  17UL,  16UL,  15UL,  14UL,  13UL,  12UL,  11UL,  10UL,   9UL,   8UL,   7UL,   6UL,   5UL,   4UL,   3UL,   2UL,   1UL};


	switch(CCIDEFindRuleYes(31,
		  (binc[0] == '1')
		| (binc[1] == '1')<<1
		| (binc[2] == '1')<<2
		| (binc[3] == '1')<<3
		| (binc[4] == '1')<<4
		  ,CCIDE_table1_yes)) {
	case 0:	//	Rule 1 
	    dec += 16;
	case 1:	//	Rule 2 
	    dec += 8;
	    goto CCIDE_case1_3;
	case 2:	//	Rule 3 
	    dec += 16;
	CCIDE_case1_3: case 3:	//	Rule 4 
	    dec += 4;
	    goto CCIDE_case1_7;
	case 4:	//	Rule 5 
	    dec += 16;
	case 5:	//	Rule 6 
	    dec += 8;
	    goto CCIDE_case1_7;
	case 6:	//	Rule 7 
	    dec += 16;
	CCIDE_case1_7: case 7:	//	Rule 8 
	    dec += 2;
	    goto CCIDE_case1_15;
	case 8:	//	Rule 9 
	    dec += 16;
	case 9:	//	Rule 10 
	    dec += 8;
	    goto CCIDE_case1_11;
	case 10:	//	Rule 11 
	    dec += 16;
	CCIDE_case1_11: case 11:	//	Rule 12 
	    dec += 4;
	    goto CCIDE_case1_15;
	case 12:	//	Rule 13 
	    dec += 16;
	case 13:	//	Rule 14 
	    dec += 8;
	    goto CCIDE_case1_15;
	case 14:	//	Rule 15 
	    dec += 16;
	CCIDE_case1_15: case 15:	//	Rule 16 
	    dec += 1;
	    break;
	case 16:	//	Rule 17 
	    dec += 16;
	case 17:	//	Rule 18 
	    dec += 8;
	    goto CCIDE_case1_19;
	case 18:	//	Rule 19 
	    dec += 16;
	CCIDE_case1_19: case 19:	//	Rule 20 
	    dec += 4;
	    goto CCIDE_case1_23;
	case 20:	//	Rule 21 
	    dec += 16;
	case 21:	//	Rule 22 
	    dec += 8;
	    goto CCIDE_case1_23;
	case 22:	//	Rule 23 
	    dec += 16;
	CCIDE_case1_23: case 23:	//	Rule 24 
	    dec += 2;
	    break;
	case 24:	//	Rule 25 
	    dec += 16;
	case 25:	//	Rule 26 
	    dec += 8;
	    goto CCIDE_case1_27;
	case 26:	//	Rule 27 
	    dec += 16;
	CCIDE_case1_27: case 27:	//	Rule 28 
	    dec += 4;
	    break;
	case 28:	//	Rule 29 
	    dec += 16;
	case 29:	//	Rule 30 
	    dec += 8;
	    break;
	case 30:	//	Rule 31 
	    dec += 16;
	    break;
	} // End Switch
}
//END_GENERATED_CODE: FOR TABLE_1, by ccide-0.5.0-2  

	printf("%s > %li\n", binc, dec);

	return 0;
}


/* End of bin2dec.in */
