#!/bin/bash

# CHECK.SH:  Test ccide 
[ -f threeway.c.d ] || cd tests || Die Cannot cd tests 
export CCIDEW=`pwd`/../src/ccidew
export CCIDE_M4DIR=`pwd`/../m4
PGM=`pwd`/../scripts/ccide
OPT="-b -c 2"
MAKE="make -s -B -i --no-print-directory"

Die() {
        echo "$0/DIE: $*"
        exit 1
}

Success() {
        NS=$(( $NS + 1 ))
        echo -e "               \033[0;32;32m ****  $* Success!	**** \033[0;32;39m"
}

Fail() {
        echo -e "               \033[0;32;31m ????  $* Failed   ????\033[0;32;39m"
        NFAIL=$(($NFAIL+1))
}

Summarize() {
        if [ $NFAIL ]; then                 
                Fail "$NFAIL tests failed and $NS succeeded."
        else 
                Success "All $NS tests succeeded. Total"
        fi
}

MakeIt() {
	X=`basename $1 .$2`
	echo Makeit $* X=$X
	[ "$2" ==    "c" ] && ( $MAKE -i  $X 	|| return 1 ) 
	[ "$2" ==  "cpp" ] && ( $MAKE $X 	|| return 1 )
	[ "$2" ==  "c++" ] && ( $MAKE $X 	|| return 1 )
	[ "$2" == "bash" ] && ( cp -avp $T $X  && chmod a+x $X	|| return 1 )
	[ "$2" == "java" ] && ( $MAKE $X	|| return 1 )
	return 0
}

TestIt() {
	./$X $TOPT < /dev/null >$X.output  	\
	&& diff -q $T.X $X.output  >/dev/null	

}

TestCase() {
	CASE=$1
	[ -z $1 ] && CASE=calc
	TINPUT=`ls $CASE*.X` || Die Cannot find $CASE*.X
	T=`basename $TINPUT .X`
	X=`ls $CASE*.d`
	touch $X
	for Y in $X; do
		Z=`basename $Y .d`
		[ -f $Z.opt ] && . $Z.opt
		$MAKE -i $Z  
	done
	$MAKE $CASE && X=$CASE && TestIt
}

Discard() {
	#SFX=`echo $T |cut -f2 -d.`    	
	DESC=$T; TOPT=;TOUT=;TIN=; OPT="-b -c 2"
	[ -f $T.opt ] && . $T.opt 2>/dev/null  
			case $SFX in
				sh|bash|SH|BASH)$PGM 	$OPT -L BASH 	< $T.d 2> $T.err > $T;;
				bas|BAS)$PGM 		$OPT -L BASIC 	< $T.d 2> $T.err > $T;;
				cc|CC)$PGM 		$OPT -L CC 	< $T.d 2> $T.err > $T;;
				c|C)$PGM 		$OPT 		< $T.d 2> $T.err > $T;;
				cpp|c++|CPP|C++)$PGM 	$OPT -L C++ 	< $T.d 2> $T.err > $T;;
				cs|CS)$PGM 		$OPT -L CS 	< $T.d 2> $T.err > $T;;
				ex|EX)$PGM 		$OPT -L EX 	< $T.d 2> $T.err > $T;;
				java|JAVA)$PGM 		$OPT -L JAVA 	< $T.d 2> $T.err > $T;;
				m4|M4)$PGM 		$OPT -m4 	< $T.d 2> $T.err > $T;;
				vb|VB)$PGM 		$OPT -L VB 	< $T.d 2> $T.err > $T;;
				qb|QB)$PGM 		$OPT -L QB 	< $T.d 2> $T.err > $T;;
				*)Die Cannot handle $TINPUT $T;;
			esac   
			diff -q $T $T.right >/dev/null 			\
			  	&& MakeIt $T $SFX 2>&1 >$T.make.out	\
			  	&& Success "$DESC generate"		\
			  	|| Fail "$DESC generate"
			 [ -f $T.X ] 					\
			  	&&  X=`basename $T .$SFX`		\
			  	&& TestIt && Success "$DESC execute" || Fail "$DESC execute"  
}

All(){
	X=`ls *.X`
	for T in $X; do 
		Y=`basename $T .X`
		SFX=`echo $Y|cut -f2 -d.` 
		Z=`basename $Y .$SFX`
		TestCase $Z $* && Success "Test" $Z || Fail "Test" $Z ;
	done
	Summarize
}


Usage() {
	cat << EOF

	Usage:
		$0 all			. Test all cases
		$0 right CASENAME	. Create CASENAME*.in & CASENAME*.right files
		$0 CASENAME		. Run CASENAME test.  Ex.  "$0 calc"
		$0 [--help]		. Show usage
EOF
	exit 1
}

VERSION=0.6.2-1

MakeRight() {
	for T in $*; do 
		X=`ls $T*.d`
		SFX=`echo $X|cut -f2 -d.`
		Y=`ls $T*.$SFX `
		for X in $Y; do
			Z=`basename $X .$SFX`
			echo make $Z.$SFX.right from $Z.$SFX
			cp -avp $Z.$SFX  $Z.$SFX.right 	\
			&& sed -e "s/$VERSION/\$CCIDE_VERSION/g" $Z.$SFX.right > $Z.$SFX.in  
		done
	done
}

case $1 in
	--help)Usage;;
	all)shift; All $*;;
	right)shift; MakeRight $*;;
	*) [ -z $1 ] && Usage 
	   for T in $*; do TestCase $T 	\
		&& Success "test $T" 	\
		|| Fail "Test" $T
	   done;;
esac
	
