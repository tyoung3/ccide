/* t6.ex.ccide:  Hello World in Euphoria  with decision table */
/*GENERATED_CODE:*/
/*
	ccide-EX.m4  Version 0.3. Copyright (C) 2002-2004,2010,2012; Thomas W. Young, e-mail:  ccide@twyoung.com
 		The code generated by ccide is covered by the same license as the source  
 		code(decision table) from which it is derived. If you created the source,  
 		you are free to do anything you like with the generated code, 
 		including incorporating it into or linking it with proprietary software.  
	
*/

integer ccide_group, CCIDE_UINT_MAX
	ccide_group=1
	CCIDE_UINT_MAX=1073741823

function CcideSetCond(integer n, sequence s)   
	integer i

	switch (n) do
		case 0 then
			return 0
		case 1 then
			return s[1]
		case 2  then
			return( or_bits( s[1], s[2] + s[2] ) )
		case else 
			i = CcideSetCond( n-2, tail(s,n-2) )
			i+=i
			i+=i
			return( or_bits( or_bits( s[1], s[2] + s[2] ),i) )
	end switch
end function

function CcideFindRule(			-- Return rule number
	integer nbrrules,
	atom ccide_table,
	sequence yes,
	sequence no)
        integer r
        atom nstate

	r=1
        nstate = xor_bits( CCIDE_UINT_MAX, ccide_table)

        while (1) do
	   if ( and_bits(yes[r],nstate) or and_bits(no[r],ccide_table) ) then 
		r+=1
	   else
		 return r-1 
           end if 
	   if r>nbrrules then
		return r
	   end if
	end while
end function

function CcideFindRuleYes(             -- Return rule number 
	integer nbrrules,
	atom ccide_table,	
	sequence yes)

        integer r
        atom nstate
	r=1
        nstate = xor_bits(CCIDE_UINT_MAX, ccide_table)

        while (1) do
	   if ( and_bits(yes[r],nstate) ) then
		r+=1
	   else
		return r-1
           end if
	   if r>nbrrules then
		return r
	   end if
	end while
end function

/*END_GENERATED_CODE:	*/
   
	integer state
	ccide_group = 1
	state = 4

        /*DECISION_TABLE:		*/
        /*   1  2  3 | ccide_group == $$	*/
        /*  _______________		*/
        /*   X  -  - | puts(1,"1.\n")	*/
        /*   -  X  - | puts(1,"2.Hello\n") */
        /*   -  -  X | puts(1,"3.World\n")	*/
        /*   2  3  4 |NEWGROUP		*/
        /*END_TABLE:			*/
        /*GENERATED_CODE: FOR TABLE_1.*/
        /*	3 Rules, 3 conditions, and 7 actions.*/
          label "CCIDE_TABLE_1"
          switch(ccide_group ) do 
        	case 3 then /*Rule 3*/
        	    puts(1,"3.World\n")
        	    ccide_group = 4
        	    goto "CCIDE_TABLE_1"
        	case 2 then /*Rule 2*/
        	    puts(1,"2.Hello\n")
        	    ccide_group = 3
        	    goto "CCIDE_TABLE_1"
        	case 1 then /*Rule 1*/
        	    puts(1,"1.\n")
        	    ccide_group = 2
        	    goto "CCIDE_TABLE_1"
         end switch 
        /*END_GENERATED_CODE: FOR TABLE_1, by ccide-0.7.0-0  */

        /*DECISION_TABLE:       	*/
        /*   Y  N  Y | state = 4		*/
        /*   1  5  6 |NEWGROUP		*/
        /* __________________		*/
        /*   X  -  - | puts(1,"4.\n")	*/
        /*   -  X  - | puts(1,"5.Goodbye\n") */
        /*   -  -  X | puts(1,"6.World\n")	*/
        /*   5  4  6 | state=$$		*/
        /*   5  6  7 |NEWGROUP		*/
        /*END_TABLE:			*/
        /*GENERATED_CODE: FOR TABLE_2.*/
        /*	3 Rules, 4 conditions, and 10 actions.*/
        /*	Table 2 rule order = 1 2 3 */
         	
        
        	ccide_group=1

        label "CCIDE_TABLE_2"
        	switch(CcideFindRule(3,
			CcideSetCond(4,{state = 4,ccide_group = 1,ccide_group = 5,ccide_group = 6}),
			{3,4,9},
			{0,1,0})) do
        	case 2 then /*Rule 3*/
        	    puts(1,"6.World\n")
        	    state=6
        	    ccide_group = 7
        	    goto "CCIDE_TABLE_2"
        	case 1 then /*Rule 2*/
        	    puts(1,"5.Goodbye\n")
        	    state=4
        	    ccide_group = 6
        	    goto "CCIDE_TABLE_2"
        	case 0 then /*Rule 1*/
        	    puts(1,"4.\n")
        	    state=5
        	    ccide_group = 5
        	    goto "CCIDE_TABLE_2"
        	end switch
        /*END_GENERATED_CODE: FOR TABLE_2, by ccide-0.7.0-0  */

        /*DECISION_TABLE:       	*/
        /*   Y  -  - | state = 6		*/
        /*   -  Y  - | state = 7		*/
        /*   -  -  Y | state = 8		*/
        /*   1  8  9 |NEWGROUP		*/
        /* __________________		*/
        /*   X  -  - | puts(1,"7.\n")	*/
        /*   -  X  - | puts(1,"8.Goodbye") */
        /*   -  X  - | puts(1," cruel\n")	*/
        /*   -  -  X | puts(1,"9.World\n")	*/
        /*   7  8  9 | state=$$		*/
        /*   8  9  0 |NEWGROUP		*/
        /*END_TABLE:			*/
        /*GENERATED_CODE: FOR TABLE_3.*/
        /*	3 Rules, 6 conditions, and 11 actions.*/
        /*	Table 3 rule order = 1 2 3 */
         	
        	ccide_group=1

        label "CCIDE_TABLE_3"
        	switch(CcideFindRuleYes(3,
			CcideSetCond(6,{state = 6,state = 7,state = 8,ccide_group = 1,ccide_group = 8,ccide_group = 9}),
			{9,18,36})) do
        	case 2 then /*Rule 3*/
        	    puts(1,"9.World\n")
        	    state=9
        	    ccide_group = 0
        	    goto "CCIDE_TABLE_3"
        	case 1 then /*Rule 2*/
        	    puts(1,"8.Goodbye")
        	    puts(1," cruel\n")
        	    state=8
        	    ccide_group = 9
        	    goto "CCIDE_TABLE_3"
        	case 0 then /*Rule 1*/
        	    puts(1,"7.\n")
        	    state=7
        	    ccide_group = 8
        	    goto "CCIDE_TABLE_3"
        	end switch
        /*END_GENERATED_CODE: FOR TABLE_3, by ccide-0.7.0-0  */
	
	if (state = 9) then
		puts(1,"t6.ex succeeded!\n")
		abort (0)
	else 
		puts(1,"t6.ex Failed.\n")
		abort (1)
	end if
 


