/*  Convert infix to RPN: A Decision table version of Dijkstra's Shunting-yard_algorithm:  

		http://en.wikipedia.org/wiki/Shunting-yard_algorithm

    While there are tokens to be read:

        Read a token.
        If the token is a number, then add it to the output queue.
        If the token is a function token, then push it onto the stack.
        If the token is a function argument separator (e.g., a comma):

            Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue. If no left parentheses are encountered, either the separator was misplaced or parentheses were mismatched.

        If the token is an operator, o1, then:

            while there is an operator token, o2, at the top of the stack, and

                    either o1 is left-associative and its precedence is less than or equal to that of o2,
                    or o1 has precedence less than that of o2,

                pop o2 off the stack, onto the output queue;

            push o1 onto the stack.

        If the token is a left parenthesis, then push it onto the stack.
        If the token is a right parenthesis:

            Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.
            Pop the left parenthesis from the stack, but not onto the output queue.
            If the token at the top of the stack is a function token, pop it onto the output queue.
            If the stack runs out without finding a left parenthesis, then there are mismatched parentheses.

    When there are no more tokens to read:

        While there are still operator tokens in the stack:

            If the operator token on the top of the stack is a parenthesis, then there are mismatched parentheses.
            Pop the operator onto the output queue.

    Exit.
*/

#include <stdlib.h>
#include <stdio.h>
#include "if2rpn.h"

//CCIDE_INLINE_CODE:
/*GENERATED_CODE: */
#ifndef __CCIDE_INLINE_C
#define __CCIDE_INLINE_C

/*ccide-$CCIDE_VERSION
ccide is Copyright (C) 2002-2004,2010,2012;  Thomas W. Young, e-mail:  ccide@twyoung.com 
The code generated by ccide is covered by the same license as the source  
code(decision table) from which it is derived. If you created the source,  
you are free to do anything you like with the generated code, 
including incorporating it into or linking it with proprietary software.  
*/ 
static int ccide_group=1; 
#ifndef UINT_MAX 
#include "limits.h" 
#endif  
 
		/* Return rule number */ 
static int CCIDEFindRule(
	int nbrrules,  unsigned long ccide_table, unsigned long yes[], unsigned long no[]){ 
        int r=0; 
        unsigned long nstate; 
 
        nstate = UINT_MAX ^ ccide_table; 
 
        while ( 
		( (yes[r] & nstate) || (no[r]  & ccide_table) ) 
		 && ( ++r < nbrrules )  
	) {}; 
 
        return r; 
} 
 
static int CCIDEFindRuleYes(             /* Return rule number */
	int nbrrules, unsigned long ccide_table, unsigned long yes[]) 
{ 
        int r=0; 
        unsigned long nstate;
 
        nstate = UINT_MAX ^ ccide_table; 
        while ( (yes[r] & nstate) && ( ++r < nbrrules ) ) {}; 
        return r; 
} 
#endif /* End ifndef  __CCIDE_INLINE_C  */
/*END_GENERATED_CODE: */


static void MisMatch() {
	fprintf(stderr,"Mismatched \n");
}

/*
        If the token is a right parenthesis:
            Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.
            Pop the left parenthesis from the stack, but not onto the output queue.
            If the token at the top of the stack is a function token, pop it onto the output queue.
            If the stack runs out without finding a left parenthesis, then there are mismatched parentheses.
*/
// TOS: 0-EMPTY, 4-LEFT_PAREN, 6-OPERATOR, 7-FUNCTION_TOKEN
static STATE DoRightParen() {

	//DECISION_TABLE:		
	//   4  7  -  6 |TOS==$$ 
	// ________________________________________
	//   X  -  -  - | Pop();  
	//   -  X  -  X | PopToQueue();
	//   -  -  -  X | goto $@;
	//   2  -  9  - | return $$;  
	//END_TABLE:
	//GENERATED_CODE: FOR TABLE_1.	4 Rules, 3 conditions, and 5 actions.
	 {	unsigned long CCIDE_table1_yes[4]={   4UL,   2UL,   1UL,   0UL};

	CCIDE_TABLE_1:
		switch(CCIDEFindRuleYes(4,
			  (TOS==4)
			| (TOS==7)<<1
			| (TOS==6)<<2
			  ,CCIDE_table1_yes)) {
		case  3:	//	Rule  3 
		    return 9;
		    break;
		case  2:	//	Rule  1 
		    Pop();
		    return 2;
		    break;
		case  0:	//	Rule  4 
		    PopToQueue();
		    goto CCIDE_TABLE_1 ;
		case  1:	//	Rule  2 
		    PopToQueue();
		    break;
		} // End Switch
	}
	//END_GENERATED_CODE: FOR TABLE_1, by ccide-$CCIDE_VERSION Mon Jul 16 12:10:33 2012 
}

//            Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue. 
// If no left parentheses are encountered, either the separator was misplaced or parentheses were mismatched.
// TOS: 0-EMPTY, 4-LEFT_PAREN, 6-OPERATOR
static STATE FindLeft() {

	//DECISION_TABLE:    /* Check Stack */
	//   0  4  6 |TOS==$$  
	// _______________
	//   -  -  X | goto $@;
	//   9  2  - | return $$; 
	//END_TABLE:
	//GENERATED_CODE: FOR TABLE_2.	3 Rules, 3 conditions, and 3 actions.
	 { CCIDE_TABLE_2: switch(TOS) {	
		case 4:		//  Rule  2  
		    return 2;
		    break;
		case 0:		//  Rule  1  
		    return 9;
		    break;
		case 6:		//  Rule  3  
		    goto CCIDE_TABLE_2 ;
	 }
	}
	//END_GENERATED_CODE: FOR TABLE_2, by ccide-$CCIDE_VERSION Mon Jul 16 12:10:33 2012 
}

/*        If the token is an operator, o1, then:
            while there is an operator token, o2, at the top of the stack, and
                    either o1 is left-associative and its precedence is less than or equal to that of o2,
                    or o1 has precedence less than that of o2,
                pop o2 off the stack, onto the output queue;
           { In main table: push o1 onto the stack.}
*/ 

static STATE DoOperator() {
	STATE s=0;

	//DECISION_TABLE:
	//   0  0  3  3  - | s==$$
	//   6  -  6  -  - | TOS==$$
	//__________________________
	//   -  -  X  -  - | PopToQueue(); 
	//   X  -  X  -  - | s=GetPrecedence();
	//   X  -  X  -  - | goto $@; 
	//   -  2  -  2  - | return $$;
	//END_TABLE:
	//GENERATED_CODE: FOR TABLE_3.	5 Rules, 3 conditions, and 4 actions.
	 {	unsigned long CCIDE_table3_yes[5]={   6UL,   5UL,   2UL,   1UL,   0UL};

	CCIDE_TABLE_3:
		switch(CCIDEFindRuleYes(5,
			  (s==0)
			| (s==3)<<1
			| (TOS==6)<<2
			  ,CCIDE_table3_yes)) {
		case  2:	//	Rule  4 
		case  3:	//	Rule  2 
		    return 2;
		    break;
		case  0:	//	Rule  3 
		    PopToQueue();
		case  1:	//	Rule  1 
		    s=GetPrecedence();
		    goto CCIDE_TABLE_3 ;
		case  4:	//	Rule  5 
		    break;
		} // End Switch
	}
	//END_GENERATED_CODE: FOR TABLE_3, by ccide-$CCIDE_VERSION Mon Jul 16 12:10:33 2012 
}
// 1-number, 2-function token, 3-function argument separator (e.g. a comma) 9=no more tokens // 4=LEFT_PAREN, 5=RIGHT_PAREN, 6=OPERATOR

int main(int argc, char **argv) {
	STATE s=0;
	TOKEN_TYPE t;

	TOS=EMPTY;     

	//DECISION_TABLE:
	//   0  2  2  2  2  2  2  - | s==$$
	//   -  1  2  3  4  5  6  - | t==$$   
	// _____________________________
	//   -  -  -  X  -  -  -  - |s=FindLeft();
	//   -  -  -  -  -  X  -  - |s=DoRightParen();
	//   -  -  -  -  -  -  X  - |s=DoOperator();
	//   -  -  X  -  X  -  X  - |PushToken();
	//   -  X  -  -  -  -  -  - |OutputNumber();
	//   2  -  -  -  -  -  -  - |s=$$;
	//   X  X  X  X  X  X  X  - |t=GetToken();
	//   X  X  X  X  X  X  X  - |goto $@;
	//END_TABLE:
	//GENERATED_CODE: FOR TABLE_4.	8 Rules, 8 conditions, and 8 actions.
	 {	unsigned long CCIDE_table4_yes[8]={ 130UL,  66UL,  34UL,  18UL,  10UL,   6UL,   1UL,   0UL};

	CCIDE_TABLE_4:
		switch(CCIDEFindRuleYes(8,
			  (s==0)
			| (s==2)<<1
			| (t==1)<<2
			| (t==2)<<3
			| (t==3)<<4
			| (t==4)<<5
			| (t==5)<<6
			| (t==6)<<7
			  ,CCIDE_table4_yes)) {
		case  6:	//	Rule  1 
		    s=2;
		    t=GetToken();
		    goto CCIDE_TABLE_4 ;
		case  5:	//	Rule  2 
		    OutputNumber();
		    t=GetToken();
		    goto CCIDE_TABLE_4 ;
		case  0:	//	Rule  7 
		    s=DoOperator();
		case  2:	//	Rule  5 
		case  4:	//	Rule  3 
		    PushToken();
		    t=GetToken();
		    goto CCIDE_TABLE_4 ;
		case  1:	//	Rule  6 
		    s=DoRightParen();
		    t=GetToken();
		    goto CCIDE_TABLE_4 ;
		case  3:	//	Rule  4 
		    s=FindLeft();
		    t=GetToken();
		    goto CCIDE_TABLE_4 ;
		case  7:	//	Rule  8 
		    break;
		} // End Switch
	}
	//END_GENERATED_CODE: FOR TABLE_4, by ccide-$CCIDE_VERSION Mon Jul 16 12:10:33 2012 

			// 0=EMPTY, 1=LEFT_PAREN, 2=RIGHT_PAREN

	    //DECISION_TABLE:    /* No more input tokens*/
	    //   -  1  2  5  7  8 |TOS==$$    
	    // __________________
	    //   -  X  -  X  -  - | MisMatch();        
	    //   -  -  X  -  X  X | PopToQueue();
	    //   -  X  X  -  X  X | goto $@;  
	    //   X  -  -  -  -  - | printf("\n");
	    //END_TABLE:
	    //GENERATED_CODE: FOR TABLE_5.	6 Rules, 5 conditions, and 4 actions.
	     {	unsigned long CCIDE_table5_yes[6]={  16UL,   8UL,   4UL,   2UL,   1UL,   0UL};

	    CCIDE_TABLE_5:
	    	switch(CCIDEFindRuleYes(6,
	    		  (TOS==1)
	    		| (TOS==2)<<1
	    		| (TOS==5)<<2
	    		| (TOS==7)<<3
	    		| (TOS==8)<<4
	    		  ,CCIDE_table5_yes)) {
	    	case  5:	//	Rule  1 
	    	    printf("\n");
	    	    break;
	    	case  0:	//	Rule  6 
	    	case  1:	//	Rule  5 
	    	case  3:	//	Rule  3 
	    	    PopToQueue();
	    	    goto CCIDE_TABLE_5 ;
	    	case  4:	//	Rule  2 
	    	    MisMatch();
	    	    goto CCIDE_TABLE_5 ;
	    	case  2:	//	Rule  4 
	    	    MisMatch();
	    	    break;
	    	} // End Switch
	    }
	    //END_GENERATED_CODE: FOR TABLE_5, by ccide-$CCIDE_VERSION Mon Jul 16 12:10:33 2012 

	return 0;

}
