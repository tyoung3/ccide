ifelse(
  File ccide-JAVA.m4
  Convert text w/embedded macros to JAVA output.
  
  USAGE:
	m4 ccide-JAVA.m4 skel.m4 > skel.java

  forloop (iterator, start, end, text)
  For JAVA conditions: (a > b) ? a : b;

)dnl
define(`array', `defn(format(``array[%d]'', `$1'))')dnl
define(`array_set', `define(format(``array[%d]'', `$1'), `$2')')dnl
define(`CCIDE_SWITCH',    `switch(CCIDE.CcideFindRule(   $1,$2,CCIDE_table$3_yes, CCIDE_table$3_no)) ')dnl
define(`CCIDE_SWITCH_YES',`switch(CCIDE.CcideFindRuleYes($1,$2,CCIDE_table$3_yes)) ')dnl
define(`CCIDE_END_SWITCH',`} CCIDE_END_BLOCK CCIDE_COMMENT(` End Switch')')dnl
define(`CCIDE_SWITCHX_JAVA',`switch($1) {')dnl
define(`CCIDE_END_COND',
	`ifelse($1, `yesno', `,CCIDE_table1_yes, CCIDE_table1_no)) {',
			     `,CCIDE_table1_yes)) {')')dnl
define(`CCIDE_CASE',`CCIDE_LABEL(`CCIDE_$1_$2') case $2:	CCIDE_COMMENT(`	Rule $3')')dnl
define(`CCIDE_IF',`if(')dnl
define(`CCIDE_SAND',` && ')dnl
define(`CCIDE_TRUE',`$1')dnl
define(`CCIDE_FALSE',`!($1)')dnl
define(`CCIDE_ENDCOND',`) {')dnl
define(`CCIDE_ENDIF',`}')dnl
define(`CCIDE_ACTION',`$1')dnl
define(`CCIDE_BREAK',`break;')dnl
define(`CCIDE_COND_BLOCK',`forloop(`j',`7',`7',`$1 $2 <<j')')dnl
define(`CCIDE_COND',`ifelse($1, `0',`($2)',`| ($2) << /*** */ $1')')dnl
define(`CCIDE_LABEL',`/*$1: */')dnl
define(`CCIDE_GOTO',`goto $1;')dnl
define(`CCIDE_BEGIN_BLOCK',`{')dnl
define(`CCIDE_END_BLOCK',`}')dnl
define(`CCIDE_BIT',`int')dnl
define(`CCIDE_COMMENT',`/*$@*/')dnl
define(`CCIDE_END_TABLE',`CCIDE_COMMENT(`GENERATED_CODE:') ')dnl
define(`CCIDE_int_C',`	int C[$1]={$2};')dnl
define(`[[')dnl   #twy
define(`]]')dnl   #twy
define(`_EXP',        `ifelse($#, 0, , $#, 1, ``$1'',
			     ``$1', _EXP(shift($@))')')dnl
define(`forloop',
       `pushdef(`$1', `$2')_forloop(`$1', `$2', `$3', `$4')popdef(`$1')')dnl
define(`_forloop',
       `$4`'ifelse($1, `$3', ,
		   `define(`$1', incr($1))_forloop(`$1', `$2', `$3', `$4')')')dnl
define(`CCIDE_TABLE_YES',
`CCIDE_BIT[] CCIDE_table$1_yes=new CCIDE_BIT[] {_EXP(shift(shift($@)))};')dnl 
define(`CCIDE_TABLE_NO',
`CCIDE_BIT[] CCIDE_table$1_no=new CCIDE_BIT[] {_EXP(shift(shift($@)))};')dnl
define(`CCIDE_MAIN',`int main(int argc, char **argv) {')dnl
define(`CCIDE_INCLUDE',`#include <stdlib.h>
#include <assert.h>
#ifdef CCIDE_LIB
#include <ccide.h>
#else
CCIDE_INLINECODE()
#endif /* End #ifdef CCIDE_LIB */
')dnl
define(`CCIDE_FUN_A',`static void A(int n) {
	printf("%i\n",n);
}
')dnl
define(`CCIDE_COPYING',
`/* Copyright (C) 2002-2004 Thomas W. Young, e-mail:  ccide@twyoung.com
** This program is free software; you can redistribute it and/or modify   
** it under the terms of the GNU General Public License as published by   
** the Free Software Foundation.                                          
**                                                                        
** This program is distributed in the hope that it will be useful,        
** but WITHOUT ANY WARRANTY; without even the implied warranty of         
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          
** GNU General Public License for more details.                           
**                                                                        
** You should have received a copy of the GNU General Public License      
** along with this program; if not, write to the Free Software            
** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.              
** ------------------------------------------ end of legal stuff -------- 
*/
')dnl
define(`CCIDE_INLINECODE',
`GENERATED_CODE:

/*
ccide-C.m4
Copyright (C) 2002-2010 Thomas W. Young, e-mail:  ccide@twyoung.com
This code (generated by ccide) is licensed under the GNU Library
General Public License
As such, it may be freely used, even link-editted with proprietary code
*/

class CCIDE {

    public static int CcideFindRule(               /* Return rule number */
	int nbrrules,  CCIDE_BIT ccide_table, CCIDE_BIT yes[], CCIDE_BIT no[]) {
        int r=0;
        CCIDE_BIT nstate;

        nstate = Integer.MAX_VALUE ^ ccide_table;

         while (
		 (
		  ((yes[r] & nstate) != 0)  || 
		  ((no[r]  & ccide_table) != 0 )
		 )
		 && ( ++r < nbrrules )
	) {  };
  	
        return r;
    }

    public static int CcideFindRuleYes(             /* Return rule number */
	int nbrrules, CCIDE_BIT ccide_table, CCIDE_BIT yes[]) {
        int r=0;
        CCIDE_BIT nstate;

        nstate = Integer.MAX_VALUE ^ ccide_table;
        while ( 
		( (yes[r] & nstate) != 0) && 
		  ( ++r < nbrrules )  
	) {};
        
        return r;
    }
}
//END_GENERATED_CODE:')dnl
divert(-1)dnl
divert(0)dnl
dnl
