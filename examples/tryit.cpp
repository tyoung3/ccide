//CCIDE_INLINE_CODE:
/*GENERATED_CODE: */
#ifndef __CCIDE_INLINE_C
#define __CCIDE_INLINE_C

/*ccide-0.5.0-7
ccide is Copyright (C) 2002-2004,2010,2012;  Thomas W. Young, e-mail:  ccide@twyoung.com 
The code generated by ccide is covered by the same license as the source  
code(decision table) from which it is derived. If you created the source,  
you are free to do anything you like with the generated code, 
including incorporating it into or linking it with proprietary software.  
*/ 
static int ccide_group=1; 
#ifndef UINT_MAX 
#include "limits.h" 
#endif  
 
		/* Return rule number */ 
static int CCIDEFindRule(
	int nbrrules,  unsigned long ccide_table, unsigned long yes[], unsigned long no[]){ 
        int r=0; 
        unsigned long nstate; 
 
        nstate = UINT_MAX ^ ccide_table; 
 
        while ( 
		( (yes[r] & nstate) || (no[r]  & ccide_table) ) 
		 && ( ++r < nbrrules )  
	) {}; 
 
        return r; 
} 
 
static int CCIDEFindRuleYes(             /* Return rule number */
	int nbrrules, unsigned long ccide_table, unsigned long yes[]) 
{ 
        int r=0; 
        unsigned long nstate;
 
        nstate = UINT_MAX ^ ccide_table; 
        while ( (yes[r] & nstate) && ( ++r < nbrrules ) ) {}; 
        return r; 
} 
#endif /* End ifndef  __CCIDE_INLINE_C  */
/*END_GENERATED_CODE: */
#include <iostream>
using namespace std;
int main ()
{
  double number;
  cout<<"Enter a number ";
  cin>>number;
  string sign;

/*  manually coded version
if( number > 0) sign = "positive";
else if (number<0) sign = "negative";
else sign = "zero";
*/

//DECISION_TABLE:
//  Y - - |number > 0
//  - Y - |number < 0
//  - - Y |number == 0
//  -------  -----------
//  X - - |sign = "positive";
//  - X - |sign = "negative";  
//  - - X |sign = "zero";	
//END_TABLE:
//GENERATED_CODE: FOR TABLE_1.	3 Rules, 3 conditions, and 3 actions.
 {	unsigned long CCIDE_table1_yes[3]={   4UL,   2UL,   1UL};


	switch(CCIDEFindRuleYes(3,
		  (number > 0)
		| (number < 0)<<1
		| (number == 0)<<2
		  ,CCIDE_table1_yes)) {
	case 0:	//	Rule 3 
	    sign = "zero";
	    break;
	case 1:	//	Rule 2 
	    sign = "negative";
	    break;
	case 2:	//	Rule 1 
	    sign = "positive";
	    break;
	} // End Switch
}
//END_GENERATED_CODE: FOR TABLE_1, by ccide-0.5.0-7 07/03/12 22:31:37 

  cout<<number<< " is "<<sign<<endl;
  return 0;
}