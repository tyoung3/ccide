#!/bin/bash

# CHECK.SH:  Test ccide 
CWD=`pwd`
[ -x ../src/ccidew ] && CCIDEW=$CWD/../src/ccidew
[ -x src/ccidew ] && CCIDEW=$CWD/src/ccidew
[ -x ../src/ccidew.exe ] && CCIDEW=$CWD/../src/ccidew.exe
[ -x src/ccidew.exe ] && CCIDEW=$CWD/src/ccidew.exe

pushd @top_srcdir@
TWD=`pwd`
popd

[ -f $TWD/../m4/ccide-C++.m4 ] && CCIDE_M4DIR=$TWD/../m4
[ -f $TWD/m4/ccide-C++.m4 ] && CCIDE_M4DIR=$TWD/m4

[ -x ../scripts/ccide ] && PGM=$CWD/../scripts/ccide
[ -x scripts/ccide ] && PGM=$CWD/scripts/ccide


export CCIDEW=$CCIDEW
export CCIDE_M4DIR=$CCIDE_M4DIR
echo CCIDEW=$CCIDEW  m4dir=$CCIDE_M4DIR
OPT="-b "
#MAKE="make -s -B -i --no-print-directory"
MAKE="make -s  -i --no-print-directory"

Die() {
        echo "$0/DIE: $*"
        exit 1
}

Success() {
        NS=$(( $NS + 1 ))
        echo -e "               \033[0;32;32m ****  $* Success!	**** \033[0;32;39m"
}

Fail() {
        echo -e "               \033[0;32;31m ????  $* Failed   ????\033[0;32;39m"
        NFAIL=$(($NFAIL+1))
}

Summarize() {
        if [ $NFAIL ]; then                 
                Fail "$NFAIL tests failed and $NS succeeded."
        else 
                Success "All $NS tests succeeded. Total"
        fi
}

MakeIt() {
	X=`basename $1 .$2`
	echo Makeit $* X=$X
	[ "$2" ==    "c" ] && ( $MAKE -i  $X 	|| return 1 ) 
	[ "$2" ==  "cpp" ] && ( $MAKE $X 	|| return 1 )
	[ "$2" ==  "c++" ] && ( $MAKE $X 	|| return 1 )
	[ "$2" == "bash" ] && ( cp -avp $T $X  && chmod a+x $X	|| return 1 )
	[ "$2" == "java" ] && ( $MAKE $X	|| return 1 )
	return 0
}

TestIt() {
	[ -x $X.exe ] && X=$X.exe
	[ -z $TIN ] && TIN=/dev/null 
	./$X $TOPT  < $TIN >$X.output 	\
	&& diff -q $TDIR/$T.X $X.output  >/dev/null	

}

CheckExpand() {
	diff $* && Success "Generate $1" 	\
			|| Fail "Generate" $1  
}

TestCase() {
	CASE=$1
	[ -z $1 ] && CASE=calc
	TINPUT=`ls $TDIR/$CASE*.X` || Die Cannot find $TDIR/$CASE*.X
	T=`basename $TINPUT .X`
	X=`ls $TDIR/$CASE*.d`
	touch $X
	TOPT=
	OPT=
	for Y in $X; do
		Z=`basename $Y .d`
		[ -f $TDIR/$Z.opt ] && . $TDIR/$Z.opt   && # echo Sourced TDIR/$Z.opt 
		$MAKE -i OPT="$OPT" $Z && CheckExpand $Z $TDIR/$Z.r  
	done
	$MAKE $CASE && X=$CASE && TestIt
}

Discard() {
	#SFX=`echo $T |cut -f2 -d.`    	
	DESC=$T; TOPT=;TOUT=;TIN=; OPT="-b -c 2"
	[ -f $T.opt ] && . $T.opt 2>/dev/null  
			case $SFX in
				sh|bash|SH|BASH)$PGM 	$OPT -L BASH 	< $T.d 2> $T.err > $T;;
				bas|BAS)$PGM 		$OPT -L BASIC 	< $T.d 2> $T.err > $T;;
				cc|CC)$PGM 		$OPT -L CC 	< $T.d 2> $T.err > $T;;
				c|C)$PGM 		$OPT 		< $T.d 2> $T.err > $T;;
				cpp|c++|CPP|C++)$PGM 	$OPT -L C++ 	< $T.d 2> $T.err > $T;;
				cs|CS)$PGM 		$OPT -L CS 	< $T.d 2> $T.err > $T;;
				ex|EX)$PGM 		$OPT -L EX 	< $T.d 2> $T.err > $T;;
				java|JAVA)$PGM 		$OPT -L JAVA 	< $T.d 2> $T.err > $T;;
				m4|M4)$PGM 		$OPT -m4 	< $T.d 2> $T.err > $T;;
				vb|VB)$PGM 		$OPT -L VB 	< $T.d 2> $T.err > $T;;
				qb|QB)$PGM 		$OPT -L QB 	< $T.d 2> $T.err > $T;;
				*)Die Cannot handle $TINPUT $T;;
			esac   
			diff -q $T $T.r >/dev/null 			\
			  	&& MakeIt $T $SFX 2>&1 >$T.make.out	\
			  	&& Success "$DESC generate"		\
			  	|| Fail "$DESC generate"
			 [ -f $T.X ] 					\
			  	&&  X=`basename $T .$SFX`		\
			  	&& TestIt && Success "$DESC execute" || Fail "$DESC execute"  
}

Allx(){
	X=`ls *.X`
	for T in $X; do 
		Y=`basename $T .X`
		SFX=`echo $Y|cut -f2 -d.` 
		Z=`basename $Y .$SFX`
		TestCase $Z $* && Success "Test" $Z || Fail "Test" $Z ;
	done
	Summarize
}


MakeEntry() {
	echo 	"$* \\" 	>> $TMPLT
	echo 	"$* \\" 	>> $PTMPLT 
}

MakeAM() {
	TMPLT=`pwd`/../extra_dist.mk.in
	PTMPLT=`pwd`/../disp_pkg.mk.in
	TDIR=./tests					 
	echo "#Generated by $0 on `date`." 					   > $TMPLT
	echo "#Generated by $0 on `date`." 					   > $PTMPLT
	echo "dist_pkgdata_DATA = m4/ccide-C.m4  m4/ccide-CC.m4 m4/ccide-C++.m4\\" >> $PTMPLT
	echo "	m4/ccide-BASH.m4 m4/ccide-BASIC.m4 m4/ccide-QB.m4 \\"		   >> $PTMPLT
	echo "EXTRA_DIST = autogen.sh src/ccide.1 ccide.spec src/ccidew ccide.spec.in ChangeLog CYGWIN-PATCHES/setup.hint.in scripts/ccide.in \\" 	 								   >> $TMPLT
	MakeEntry "	src/Makefile.in  src/ccide.pod.in src/ccideconfig.h.in"
	MakeEntry "	src/ccidemain.h src/ccide.h src/gettext.h src/parse.h \$(srcdir)/src/ccidelex.l"
	MakeEntry "	src/ccideinline.c  src/ccidelex.c  src/ccidemain.c  src/ccideparse.c src/ccideparse.y  src/cciderunx.c"
	MakeEntry "	tests/f1 tests/f2 tests/f3 tests/f4 tests/if2rpn.txt tests/tryit.txt tests/Makefile"
	MakeEntry "	scripts/check.sh scripts/Makefile scripts/Makefile.in scripts/ccide.in scripts/check.sh.in"
	MakeEntry "	po/Makefile.in.in po/Makevars po/ccide.pot po/Makevars"
	for TINPUT in src/ccideparse.y.d src/ccidemain.c.d; do 
		echo "	$TINPUT"							   >> $TMPLT
	done				   
	for TINPUT in *.X; do
			MakeEntry "	$TDIR/$TINPUT"	
			T=`basename $TINPUT .X`
			[ -f $T.h ] && MakeEntry "	$TDIR/$T.h "
			for D in ${T}*.opt; do
				[ -f $D ] && MakeEntry "	$TDIR/$D "
			done
			for D in $T*.d; do
				MakeEntry "	$TDIR/$D "
			done
			for R in $T*.r; do
				MakeEntry "	$TDIR/$R "
			done
	done
	echo 				"	scripts/check.sh "	>> $TMPLT	
	echo "	m4/ccide-VB.m4 m4/ccide-JAVA.m4 m4/ccide-CS.m4 m4/ccide-EX.m4"  >> $PTMPLT
}

Usage() {
	cat << EOF

	Usage:
		$0 CASENAME ...		. Run CASENAME test.  Ex.  "$0 calc simple in2rpn"
		$0 gettrans		. Update translation po files.
		$0 mkright CASENAME ...	. Create CASENAME*.r files from generated source files. 
		$0 -V			. Show check.sh version
		$0 [--help]		. Show usage
       

EOF
       # NOTE: MALLOC_CHECK_=3 is set by $0.  Set MALLOC_CHECK_=0 to bypass hook messages.
	exit 1
}


MakeIn() {
	for T in $*; do 
		X=`ls $T*.d`
		SFX=`echo $X|cut -f2 -d.`
		Y=`ls $T*.$SFX `
		for X in $Y; do
			Z=`basename $X .$SFX`
			echo make $Z.$SFX.r.in from $Z.$SFX
			sed  -e "s/$VERSION/\$CCIDE_VERSION/g" $Z.$SFX   > $Z.$SFX.r.in 
		done
	done
}

MakeRight() {
	for T in $*; do 
		Z=`ls $TDIR/$T*.d`
		for W in $Z; do
			X=`basename $W`
			SFX=`echo $X|cut -f2 -d.`
			Y=`basename $X .d `
			Z=`basename $X .$SFX`
			cp -avp $TDIR/$Y $Y.r 
		done
	done
}

GetTranslations() {
	pushd ../po || Die Cannot cd ../po
	rsync -Lrtvz  translationproject.org::tp/latest/ccide/  po
	popd
}

VERSION=@VERSION@-@RELEASE@
[ -d ../tests ] && pushd ../tests 
[ -d ./tests  ] && pushd ./tests
#[ -f @top_srcdir@/tests/threeway.X ] || echo cannot find @top_srcdir@/tests/threeway.X 

TDIR=@top_srcdir@/tests
[ -f $TDIR/threeway.X ] || TDIR=../@top_srcdir@/tests
[ -f $TDIR/threeway.X ] || TDIR=./
[ -f $TDIR/threeway.X ] || Die Cannot find threeway.X
[ -f $TDIR/threeway.X ] || Die Cannot find threeway.X

case $1 in
	--help)	Usage;;
	-V)	echo 	check.sh-0.0;;
	all)	shift; 	All $*;;
	gettrans) shift; GetTranslations $*;;
	mkam)shift; MakeAM $*;;
	mkin)shift; MakeIn $*;;
	mkright)shift;	MakeRight $*;;
	*) 	[ -z $1 ] && Usage 
		# MALLOC_CHECK clutters up make check too much with this msg:   malloc: using debugging hooks
		# ?? [ -z $MALLOC_CHECK_ ] && export MALLOC_CHECK_=3;  # Slower, but message and abort on error. 
	   	for T in $*; do 
			TestCase $T 	\
			&& Success "Test $T" 	\
			|| Fail "Test" $T  
	  	done
	        Summarize
	   ;;
esac
	
